services:
  ui-admin:
    container_name: ui-admin
    build:
      context: ../Code-Base/ui-admin
      dockerfile: ../../Docker-Environment-Orchestration/UI-ADMIN/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    depends_on:
      - api-gateway

  ui-consumer:
    container_name: ui-consumer
    build:
      context: ../Code-Base/ui-consumer
      dockerfile: ../../Docker-Environment-Orchestration/UI-CONSUMER/Dockerfile
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
    depends_on:
      - api-gateway

  ui-business:
    container_name: ui-business
    build:
      context: ../Code-Base/ui-business
      dockerfile: ../../Docker-Environment-Orchestration/UI-BUSINESS/Dockerfile
    ports:
      - "3003:3000"
    environment:
      - NODE_ENV=development
    depends_on:
      - api-gateway
  # Original bit, working, just in case
  # api-gateway:
  #   # build: ./api-gateway
  #   build:
  #     context: ../Code-Base/API-GATEWAY
  #     dockerfile: ../../Docker-Environment-Orchestration/API-GATEWAY/Dockerfile
  #   ports:
  #     - "4000:4000"
  #   depends_on:
  #     - auth-service
  #     - user-service
  #     - card-service
  #     - payment-service
  #     - fx-service
  #     - kyc-service

  api-gateway:
    build:
      context: ../Code-Base/api-gateway
      dockerfile: ../../Docker-Environment-Orchestration/API-GATEWAY/Dockerfile
    container_name: api-gateway
    ports:
      - "4000:4000"
    depends_on:
      - auth-service
      - user-service
      - card-service
      - payment-service
      - fx-service
      - kyc-service
    restart: unless-stopped
    environment:
      - NODE_ENV=development
    env_file:
      - ../Code-Base/api-gateway/.env
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:4000" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - calu-network
    volumes:
      - ../Code-Base/api-gateway:/app:cached # Optional: hot reload in dev

  auth-service:
    container_name: auth-service
    build:
      context: ../Code-Base/AUTH-SERVICE
      dockerfile: ../../Docker-Environment-Orchestration/AUTH-SERVICE/Dockerfile
    ports:
      - "4001:4000"
    depends_on:
      - postgres

  user-service:
    container_name: user-service
    build:
      context: ../Code-Base/USER-SERVICE
      dockerfile: ../../Docker-Environment-Orchestration/USER-SERVICE/Dockerfile
    ports:
      - "4002:4000"
    depends_on:
      - postgres

  card-service:
    container_name: card-service
    build:
      context: ../Code-Base/CARD-SERVICE
      dockerfile: ../../Docker-Environment-Orchestration/CARD-SERVICE/Dockerfile
    ports:
      - "4003:4000"
    depends_on:
      - postgres

  payment-service:
    container_name: payment-service
    build:
      context: ../Code-Base/PAYMENT-SERVICE
      dockerfile: ../../Docker-Environment-Orchestration/PAYMENT-SERVICE/Dockerfile
    ports:
      - "4004:4004"
    depends_on:
      - postgres

  fx-service:
    container_name: fx-service
    build:
      context: ../Code-Base/FX-SERVICE
      dockerfile: ../../Docker-Environment-Orchestration/FX-SERVICE/Dockerfile
    ports:
      - "4005:4005"
    depends_on:
      - postgres

  kyc-service:
    restart: unless-stopped
    container_name: kyc-service
    build:
      context: ../Code-Base/KYC-SERVICE
      dockerfile: ../../Docker-Environment-Orchestration/KYC-SERVICE/Dockerfile
    ports:
      - "4006:4006"
    depends_on:
      - postgres

  redis-worker:
    container_name: redis-worker
    build:
      context: ../Code-Base/REDIS-WORKER
      dockerfile: ../../Docker-Environment-Orchestration/REDIS-WORKER/Dockerfile
    depends_on:
      - redis

  rabbitmq-worker:
    container_name: rabbitmq-worker
    build:
      context: ../Code-Base/RABBITMQ-WORKER
      dockerfile: ../../Docker-Environment-Orchestration/RABBITMQ-WORKER/Dockerfile
    depends_on:
      - rabbitmq

  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres  # ðŸ”§ Change this if you want a custom DB user
      POSTGRES_PASSWORD: postgres  # ðŸ”§ Change this for security in production
      POSTGRES_DB: calu_system  # ðŸ”§ Change to your desired DB name
      TZ: UTC  # ðŸ§  Set timezone to UTC for consistency
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    container_name: redis
    image: redis:7
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data  # ðŸ§  Optional but recommended for persistence

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmqdata:/var/lib/rabbitmq  # ðŸ§  Ensures queues/config persist

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@local.com  # ðŸ”§ Set to your preferred email
      PGADMIN_DEFAULT_PASSWORD: admin  # ðŸ”§ Change for secure access
    ports:
      - "5050:80"
    depends_on:
      - postgres
    volumes:
      - pgadmindata:/var/lib/pgadmin  # ðŸ§  Stores pgAdmin config
  
  dummy-service:
    build:
      context: ../Code-Base/DUMMY-SERVICE
      dockerfile: ../../Docker-Environment-Orchestration/DUMMY-SERVICE/Dockerfile
    container_name: dummy-service
    ports:
      - "3002:3002" # Expone el puerto 3002 al host
    networks:
      - calu-network

volumes:
  pgdata:
  redisdata:
  rabbitmqdata:
  pgadmindata:

networks:
  calu-network:
    driver: bridge